!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Config	config.h	/^    class Config{$/;"	c	namespace:fepoh
ConfigVarBase	config.cpp	/^ConfigVarBase:: ConfigVarBase(const std::string& name,const std::string& description)$/;"	f	class:fepoh::ConfigVarBase
ConfigVarBase	config.h	/^    class ConfigVarBase{$/;"	c	namespace:fepoh
ConfigYAML	config.h	/^        ConfigYAML(const T& value,const std::string& name,const std::string description)$/;"	f	class:fepoh::ConfigYAML
ConfigYAML	config.h	/^    class ConfigYAML : public ConfigVarBase{$/;"	c	namespace:fepoh
GetData	config.h	/^            static std::map<std::string,ConfigVarBase::ptr>& GetData(){$/;"	f	class:fepoh::Config
GetThreadId	util.cpp	/^    uint32_t GetThreadId(){$/;"	f	namespace:fepoh
LexicalCast	config.h	/^    class LexicalCast{$/;"	c	namespace:fepoh
ListenerFunc	config.h	/^        typedef std::function<void(const T& old_val,const T& new_val)> ListenerFunc;$/;"	t	class:fepoh::ConfigYAML
Thread	thread.cpp	/^Thread::Thread(std::function<void()>cb, const std::string& m_name):m_cb(cb){$/;"	f	class:fepoh::Thread
Thread	thread.h	/^    class Thread:public boost::noncopyable{$/;"	c	namespace:fepoh
addListener	config.h	/^        uint64_t addListener(const ListenerFunc& func){$/;"	f	class:fepoh::ConfigYAML
clrListener	config.h	/^        void clrListener(){$/;"	f	class:fepoh::ConfigYAML
delListender	config.h	/^        void delListender(const uint64_t index){$/;"	f	class:fepoh::ConfigYAML
detach	thread.cpp	/^void Thread::detach(){$/;"	f	class:fepoh::Thread
fepoh	config.cpp	/^namespace fepoh{$/;"	n	file:
fepoh	config.h	/^namespace fepoh{$/;"	n
fepoh	thread.cpp	/^namespace fepoh{$/;"	n	file:
fepoh	thread.h	/^namespace fepoh{$/;"	n
fepoh	util.cpp	/^namespace fepoh{$/;"	n	file:
fepoh	util.h	/^namespace fepoh{$/;"	n
fromstring	config.h	/^        bool fromstring(const std::string val){$/;"	f	class:fepoh::ConfigYAML
g_log_root	config.h	/^static fepoh::Logger::ptr g_log_root=FEPOH_LOG_NAME("root");$/;"	v
getAndResetErr	config.cpp	/^bool ConfigVarBase::getAndResetErr() {$/;"	f	class:fepoh::ConfigVarBase
getDescription	config.h	/^            const std::string& getDescription() const {return m_description;}$/;"	f	class:fepoh::ConfigVarBase
getId	thread.h	/^            pid_t getId() const {return m_id;}$/;"	f	class:fepoh::Thread
getListener	config.h	/^        ListenerFunc getListener(const uint64_t index){$/;"	f	class:fepoh::ConfigYAML
getName	config.h	/^            const std::string& getName() const {return m_name;}$/;"	f	class:fepoh::ConfigVarBase
getValue	config.h	/^        const T& getValue() const {return m_val;}$/;"	f	class:fepoh::ConfigYAML
join	thread.cpp	/^void Thread::join(){$/;"	f	class:fepoh::Thread
m_cb	thread.h	/^            std::function<void(void)> m_cb;$/;"	m	class:fepoh::Thread
m_description	config.h	/^            std::string m_description;  \/\/配置描述$/;"	m	class:fepoh::ConfigVarBase
m_hasError	config.h	/^            bool m_hasError = false;    \/\/错误$/;"	m	class:fepoh::ConfigVarBase
m_id	thread.h	/^            pit_t m_id;$/;"	m	class:fepoh::Thread
m_listeners	config.h	/^            std::map<uint64_t,ListenerFunc> m_listeners;$/;"	m	class:fepoh::ConfigYAML
m_name	config.h	/^            std::string m_name;         \/\/配置名称$/;"	m	class:fepoh::ConfigVarBase
m_name	thread.h	/^            std::string m_name;$/;"	m	class:fepoh::Thread
m_thread	thread.h	/^            pthread_t m_thread;$/;"	m	class:fepoh::Thread
m_val	config.h	/^            T m_val;$/;"	m	class:fepoh::ConfigYAML
operator ()	config.h	/^            Dst operator()(Src val){$/;"	f	class:fepoh::LexicalCast
ptr	config.h	/^            typedef std::shared_ptr<ConfigVarBase> ptr;$/;"	t	class:fepoh::ConfigVarBase
ptr	config.h	/^        typedef std::shared_ptr<ConfigYAML> ptr;$/;"	t	class:fepoh::ConfigYAML
ptr	thread.h	/^            typedef std::shared_ptr<Thread> ptr;$/;"	t	class:fepoh::Thread
setError	config.h	/^            void setError(bool val) {m_hasError = val;}$/;"	f	class:fepoh::ConfigVarBase
setValue	config.h	/^        void setValue(const T& val){$/;"	f	class:fepoh::ConfigYAML
tostring	config.h	/^        const std::string& tostring() const {$/;"	f	class:fepoh::ConfigYAML
~ConfigVarBase	config.cpp	/^ConfigVarBase::~ConfigVarBase(){}$/;"	f	class:fepoh::ConfigVarBase
~Thread	thread.cpp	/^Thread::~Thread(){$/;"	f	class:fepoh::Thread
